"""
Notebook Python para An√°lise de Grafos - TAG UNB
Este arquivo pode ser executado no Jupyter Notebook ou convertido para .ipynb

Integrantes:
- [Gustavo Choueiri] - [232014010]
- [Giovanni Daldegan] - [232002520]

Objetivo: Analisar uma rede social do Facebook extraindo 2000 n√≥s aleat√≥rios 
e aplicando algoritmos de detec√ß√£o de comunidades e medidas de centralidade.
"""

# =============================================================================
# 1. IMPORTATION DE BIBLIOTECAS E CONFIGURA√á√ïES
# =============================================================================

print("# Projeto de An√°lise de Grafos - TAG UNB")
print("## An√°lise de Rede Social do Facebook")
print()
print("**Integrantes:**")
print("- [Nome] - [Matr√≠cula]")
print("- [Nome] - [Matr√≠cula]")
print()
print("**Objetivo:** Analisar uma rede social do Facebook extraindo 2000 n√≥s aleat√≥rios e aplicando algoritmos de detec√ß√£o de comunidades e medidas de centralidade.")
print()
print("---")

# Importa√ß√£o das bibliotecas necess√°rias
import networkx as nx
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random
import os
from collections import defaultdict
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√µes para visualiza√ß√£o
plt.style.use('default')
sns.set_palette("husl")

print("=== PROJETO DE AN√ÅLISE DE GRAFOS - TAG UNB ===")
print("An√°lise de Rede Social do Facebook")
print("=" * 50)

# =============================================================================
# 2. EXECU√á√ÉO DA AN√ÅLISE COMPLETA
# =============================================================================

print("\n## 2. Execu√ß√£o da An√°lise Completa")
print("\nExecutamos todo o c√≥digo desenvolvido no arquivo `main.py` para realizar a an√°lise completa.")
print()

# Executa todo o c√≥digo do main.py
exec(open('main.py').read())

# =============================================================================
# 3. VISUALIZA√á√ïES ADICIONAIS
# =============================================================================

print("\n## 3. Visualiza√ß√µes Adicionais")
print("\nCriamos visualiza√ß√µes espec√≠ficas para o notebook com maior detalhamento.")
print()

# Visualiza√ß√£o detalhada das comunidades
plt.figure(figsize=(15, 10))

# Subplot 1: Grafo com comunidades
plt.subplot(2, 2, 1)
num_comunidades = len(set(comunidades_dict.values()))
cores = plt.cm.Set3(np.linspace(0, 1, num_comunidades))
cores_nos = [cores[comunidades_dict.get(no, 0)] for no in G.nodes()]
pos = nx.spring_layout(G, k=1, iterations=50)
nx.draw(G, pos, node_color=cores_nos, node_size=30, edge_color='gray', alpha=0.6, with_labels=False)
plt.title('Grafo com Comunidades')
plt.axis('off')

# Subplot 2: Distribui√ß√£o de graus
plt.subplot(2, 2, 2)
graus = [G.degree(n) for n in G.nodes()]
plt.hist(graus, bins=30, alpha=0.7, color='skyblue')
plt.title('Distribui√ß√£o de Graus')
plt.xlabel('Grau')
plt.ylabel('Frequ√™ncia')

# Subplot 3: Tamanhos das comunidades
plt.subplot(2, 2, 3)
tamanhos_comunidades = [len(comunidade) for comunidade in comunidades_list]
plt.bar(range(len(tamanhos_comunidades)), tamanhos_comunidades, color='lightcoral')
plt.title('Tamanhos das Comunidades')
plt.xlabel('ID da Comunidade')
plt.ylabel('N√∫mero de N√≥s')

# Subplot 4: Correla√ß√£o entre medidas
plt.subplot(2, 2, 4)
df_medidas = pd.DataFrame(medidas)
correlacao = df_medidas.corr()
im = plt.imshow(correlacao, cmap='coolwarm', aspect='auto')
plt.colorbar(im)
plt.title('Correla√ß√£o entre Medidas')
plt.xticks(range(len(medidas.keys())), list(medidas.keys()), rotation=45)
plt.yticks(range(len(medidas.keys())), list(medidas.keys()))

plt.tight_layout()
plt.show()

# =============================================================================
# 4. AN√ÅLISE DETALHADA DOS TOP N√ìS
# =============================================================================

print("\n## 4. An√°lise Detalhada dos Top N√≥s")
print("\nAn√°lise detalhada dos n√≥s mais influentes em cada medida de centralidade.")
print()

# Tabela resumo dos top n√≥s
print("üìä TABELA RESUMO DOS N√ìS MAIS INFLUENTES")
print("=" * 80)

# Cria DataFrame com os top 5 de cada medida
dados_resumo = []
for medida, nome in [('grau', 'Grau'), ('intermediacao', 'Intermedia√ß√£o'), 
                     ('proximidade', 'Proximidade'), ('autovetor', 'Autovetor')]:
    top_5 = nos_influentes[medida][:5]
    for i, (no, valor) in enumerate(top_5, 1):
        dados_resumo.append({
            'Medida': nome,
            'Posi√ß√£o': i,
            'N√≥': no,
            'Valor': valor,
            'Grau': G.degree(no),
            'Comunidade': comunidades_dict.get(no, 'N/A')
        })

df_resumo = pd.DataFrame(dados_resumo)
print(df_resumo.to_string(index=False))

# Estat√≠sticas gerais
print(f"\nüìà ESTAT√çSTICAS GERAIS:")
print(f"‚Ä¢ Total de n√≥s analisados: {G.number_of_nodes()}")
print(f"‚Ä¢ Total de arestas: {G.number_of_edges()}")
print(f"‚Ä¢ Densidade: {nx.density(G):.4f}")
print(f"‚Ä¢ N√∫mero de comunidades: {len(comunidades_list)}")
print(f"‚Ä¢ Tamanho m√©dio das comunidades: {np.mean(tamanhos_comunidades):.1f}")
print(f"‚Ä¢ Coeficiente de clustering m√©dio: {nx.average_clustering(G):.4f}")

# =============================================================================
# 5. CONCLUS√ïES E INTERPRETA√á√ïES
# =============================================================================

print("\n## 5. Conclus√µes e Interpreta√ß√µes")
print()
print("### Principais Descobertas:")
print()
print("1. **Estrutura da Rede**: O grafo extra√≠do apresenta caracter√≠sticas t√≠picas de redes sociais reais, com baixa densidade e estrutura de comunidade bem definida.")
print()
print("2. **Detec√ß√£o de Comunidades**: O algoritmo de Louvain foi eficaz em identificar grupos coesos de usu√°rios, revelando a estrutura social subjacente.")
print()
print("3. **Medidas de Centralidade**: Diferentes medidas identificaram diferentes tipos de import√¢ncia:")
print("   - **Grau**: Identifica \"hubs\" da rede")
print("   - **Intermedia√ß√£o**: Identifica \"pontes\" entre comunidades")
print("   - **Proximidade**: Identifica n√≥s centralmente posicionados")
print("   - **Autovetor**: Identifica influenciadores de influenciadores")
print()
print("4. **Aplica√ß√µes Pr√°ticas**: Os resultados podem ser utilizados para:")
print("   - Campanhas de marketing direcionadas")
print("   - Identifica√ß√£o de influenciadores")
print("   - Estrat√©gias de dissemina√ß√£o de informa√ß√µes")
print("   - An√°lise de conectividade da rede")
print()
print("### Limita√ß√µes e Melhorias Futuras:")
print()
print("- O projeto trabalha com uma amostra de 2000 n√≥s, que pode n√£o representar completamente a rede original")
print("- An√°lises temporais poderiam revelar como a influ√™ncia evolui ao longo do tempo")
print("- Incorpora√ß√£o de atributos dos usu√°rios poderia enriquecer a an√°lise")
print()
print("---")
print()
print("**Projeto conclu√≠do com sucesso!** ‚úÖ")
